grammar BiolangualParser
  rule expression
    whitespace
    first:(literal / message)
    rest:(whitespace message)*
    whitespace
    { def to_ast
        rest_asts = rest.elements.map { |e| e.message.to_ast }
        {type: :expression, messages: [first.to_ast, *rest_asts]}
      end
    }
  end

  rule literal
    number / string
  end

  rule number
    [0-9]+ ("." [0-9]+)?
    { def to_ast
        {type: :number, value: text_value.to_f}
      end
    }
  end

  rule string
    '"' chars:string_char* '"'
    { def to_ast
        value = chars.elements.map { |c| c.ruby_value }.join
        {type: :string, value: value}
      end
    }
  end

  rule string_char
    ('\t' / '\n' / '\r' / '\"' / [^"])
    {
      def ruby_value
        map = {
          '\t' => "\t",
          '\n' => "\n",
          '\r' => "\r",
          '\"' => "\"",
        }
        map[text_value] || text_value
      end
    }
  end

  rule message
    parentheses_message / token_message
  end

  rule parentheses_message
    '(' whitespace paren_args whitespace ')'
    { def to_ast
        {type: :message, name: '()', arguments: paren_args.to_ast}
      end
    }
  end

  rule paren_args
    (whitespace expression whitespace ','?)*
    { def to_ast
        elements.map { |ast| ast.expression.to_ast }
      end
    }
  end

  rule token_message
    [^ ,()\n]+
    { def to_ast
        {type: :message, name: text_value, arguments: []}
      end
    }
  end

  rule whitespace
    [ \t\n]*
  end
end
